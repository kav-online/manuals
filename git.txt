Можно работать в Power shell или Git Bash (как терминал) или Visual Studio Code 

git --version   -проверка установленой версии, если версия старая обновить с сайта git-scm.com
git config --list     -вывести настройки

При необходимости установить (имя и почта должны быть как при регистрации на github):
git config --global user.name kav-online (надо использовать кавычки "" если есть пробел в имени)  
git config --global user.email kavonline@mail.ru

git init   -инициализация нового репозитория в текущей папке проекта, в папке проекта будет создана скрытая папка .git 
git status   -текущее сосотояние репозитория 
git add <files>  или  git add .  (все файлы)   -подготовка файлов перед коммитом (добавляет файлы в область Индекс) 
git commit -m "<message>"   -создание нового коммита с комментарием (добавляет подготовленные файлы в область Репозиторий)
git log   -просмотр истории изменений (коммитов), отображает хэш коммитов
git checkout <commit hash>   -переход в определенную версию по хэшу нужного коммита  
git checkout <branch name>   -переход в определенную версию по названию нужной ветки (включая ветки в удаленном репозитории)
git branch <branch name>   -создание новой ветки  
git checkout -b <branch name>   -создание новой ветки и переход в нее
git branch -m <new branch name>   -переименование текущей ветки
git branch -d <branch name>   -удаление ветки (текущую ветку удалить нельзя)
git branch   -отображает список всех веток 
git merge -m "<message>" <feature branch name>   -слияние другой ветки (feature branch) в текущую ветку (receving branch) 

У гита есть 4 вида объектов: blob - файл, tree - папка, commit - коммит и аннотированный тег. Файлы объектов храняться в папке .git/objects
В папке содержатся ссылки на вложенные файлы.
В коммите содержится имя и почта автора, комментарий, хэш предыдущего (родительского) коммита и хэш корневой папки (объект tree) проекта.
Первый коммит называется корневым, у него нет родительского коммита.
Ветка - ссылка на хэш последнего коммита, при создании нового коммита ветка соответственно изменяется (первая созданная ветка называется master).
Указатель (Head) - указатель на текущую версию проекта (может указывать на ветку (HEAD->master->последний коммит) или на какой то указанный коммит на оси времени (HEAD->указанный коммит)).
Указатель определяет текущее содержимое корневой папки проекта (Рабочая область) в зависимости от выбранного коммита. 
При выполнении git checkout <commit hash> (откат по оси времени назад) указатель отвяжется от ветки ('detached HEAD') и будет указывать на указанный коммит (находится в таком состояние не рекомендуется (только что то посмотреть и вернуться к указанию на ветку). 
git checkout <branch name> - возврат (переключение) на ветку (Switched to branch 'master')
Коммит всегда выполняется в текущей ветке. Что бы сделать коммит в другой ветке надо сначало в нее переключиться git checkout <branch name>.
Коммит слияния веток называется коммитом слияния (Merge commit) и он содержит два родительских коммита (из веток слияния ).
При слянии указатель переключается на созданный коммит слияния текущей ветки и таким образом текущая ветка принимает изменения из ветки с которой происходит слитие. 
После слияния с текущей веткой, сливаемую ветку можно удалить git branch -d <branch name> т.к. все изменения будут перенесены в текущую ветку и ее коммиты будут видны уже в текущей ветке по команде git log
При слиянии могут возникат конфликты если какой либо объект был изменен в коммитах сливаемых веток и их необходимо разрешить разработчику. 

Если выполнить git log и увидеть хэш коммита, то в папке .git/objects нужно найти папку с именем равным двум первыс символам хэша коммита,
далее в ней нужно найти файл с оставшимися символами хэша коммита - это и будет файл объект коммита.
Увидеть тип любого обьекта в файле можно с помощью команды  git cat-file -t <первые 8 символов хэша коммита>,
а прочитать содержимое файла можно с помощью команды  git cat-file -p <первые 8 символов хэша коммита>

Для исключения файлов из контроля версия надо создать файл .gitignore в корне репозитория и в него внести имена папок или фалов на игнор.
git add .gitignore
git commit -m "Add file .gitignore"
Файл должен быть в кодировке utf-8 (можно конвертировать в notepad++)

git clone <url>   -клонирование (скачивание) удаленного репозитория в локальный (origin - имя удаленного репозитория по умолчанию)
git branch -a   -отображает все ветки включая ветки в удаленном репозитории
git remote add origin <url>   -подключение удаленного репозитория  
git remote    -проверка что есть удаленный репозиторий
git remote -v   -проверка связи с удаленным репозиторием 
git branch -vv   -проверки связи с удаленной веткой
git push -u origin <branch>   -при первой загрузки (однократно) из текущей локальной ветки в удаленную ветку branch (связывание веток), далее просто git push   
git pull   -загрузка и применение изменений с ветки удаленного репозитория в локальную ветку
git push   -загрузка изменения из локальной ветки в ветку удаленного репозитория

1. на github создать новый репозиторий (лучше как назван локально)
2. на странице созданного репозитория найти параграф "…or push an existing repository from the command line" 
3. скопировать и выполнить строку git remote add origin https://github.com/kav-online/.... 
4. выполнить проверку git remote , должен быть origin
5. если локально ветка master еще не переименована в main то выполнить переименование git branch -M main
6. на github перейти в Settings (вверху справа) - Developer settings - Personal access tokens - Tokens (classic) - Generate new token
7. заполнить Note и  Expiration, Select scopes - repo, далее нажать Generate token и скопировать сам токен ...
8. выполнить git push -u origin main , запросит логин и токен, далее загрузит проект на github
9. непосредственно на github можно вносить изменения и создавать файлы и делать коммиты. синхронизировать локальный репозиторий с изменениями на удаленном git pull

